<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mongodb 数据备份和权限</title>
      <link href="/2017/08/02/mongodb-shu-ju-bei-fen-he-quan-xian/"/>
      <url>/2017/08/02/mongodb-shu-ju-bei-fen-he-quan-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mongodb 数据管理操作，导入导出，权限管理。</p></blockquote><a id="more"></a><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><pre class=" language-bash"><code class="language-bash">mongodump -h 127.0.0.1:27017 -d <span class="token operator">&lt;</span>db<span class="token operator">></span> -o <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token punctuation">[</span>-u -p<span class="token punctuation">]</span></code></pre><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><pre class=" language-bash"><code class="language-bash">mongorestore —host 127.0.0.1: 27017 -d <span class="token operator">&lt;</span>db<span class="token operator">></span> <span class="token operator">&lt;</span>path<span class="token operator">></span></code></pre><h2 id="单表导出"><a href="#单表导出" class="headerlink" title="单表导出"></a>单表导出</h2><pre class=" language-bash"><code class="language-bash">mongoexport -d <span class="token operator">&lt;</span>db<span class="token operator">></span> -c <span class="token operator">&lt;</span>table<span class="token operator">></span> -q ‘<span class="token punctuation">{</span>“name”:<span class="token punctuation">{</span><span class="token variable">$ne</span>:null<span class="token punctuation">}</span><span class="token punctuation">}</span>’ -o <span class="token operator">&lt;</span>path<span class="token operator">></span>.json</code></pre><h2 id="单表导入"><a href="#单表导入" class="headerlink" title="单表导入"></a>单表导入</h2><pre class=" language-bash?linenums"><code class="language-bash?linenums">mongoimport —host 127.0.0.1:27017 -d <db> -c <table> <path>.json</code></pre><h2 id="数据清空"><a href="#数据清空" class="headerlink" title="数据清空"></a>数据清空</h2><pre class=" language-bash"><code class="language-bash">mongo —host 127.0.0.1:19999 <span class="token operator">&lt;</span>db<span class="token operator">></span> —eval “db.dropDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>"</code></pre><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h3 id="设置超级管理员"><a href="#设置超级管理员" class="headerlink" title="设置超级管理员"></a>设置超级管理员</h3><pre class=" language-js"><code class="language-js">db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>    pwd<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>    roles <span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>        role<span class="token punctuation">:</span> <span class="token string">'userAdminAnyDatabase'</span><span class="token punctuation">,</span>        db<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span></code></pre><h3 id="某个库的用户"><a href="#某个库的用户" class="headerlink" title="某个库的用户"></a>某个库的用户</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在设置某个数据库的时候，先执行授权</span>use admin<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>use demo<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token string">'demo_user'</span><span class="token punctuation">,</span>    pwd<span class="token punctuation">:</span> ‘<span class="token number">123456</span>’<span class="token punctuation">,</span>    roles <span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>        role<span class="token punctuation">:</span> <span class="token string">'readWrite'</span><span class="token punctuation">,</span>        db<span class="token punctuation">:</span> <span class="token string">'demo'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="备份用户"><a href="#备份用户" class="headerlink" title="备份用户"></a>备份用户</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在设置某个数据库的时候，先执行授权</span>use admin<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>use demo<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token string">'demo_wheel'</span><span class="token punctuation">,</span>    pwd<span class="token punctuation">:</span> ‘<span class="token number">123456</span>’<span class="token punctuation">,</span>    roles <span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>        role<span class="token punctuation">:</span> <span class="token string">'read'</span><span class="token punctuation">,</span>        db<span class="token punctuation">:</span> <span class="token string">'demo'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="开启授权认证"><a href="#开启授权认证" class="headerlink" title="开启授权认证"></a>开启授权认证</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/mongod.conf<span class="token comment" spellcheck="true"># 去掉注释 </span>security:    authorization: <span class="token string">'enabled'</span><span class="token comment" spellcheck="true"># 重启</span><span class="token function">sudo</span> <span class="token function">service</span> mongod restart</code></pre><h3 id="访问某个库"><a href="#访问某个库" class="headerlink" title="访问某个库"></a>访问某个库</h3><pre class=" language-bash"><code class="language-bash">mongo 127.0.0.1:27017/<span class="token operator">&lt;</span>db<span class="token operator">></span> -u demo_user -p 123456</code></pre><h2 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h2><h3 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h3><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>backup_file<span class="token operator">=</span>/home/backup/<span class="token operator">&lt;</span>db<span class="token operator">></span>date_now<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y_%m_%d_%H%M<span class="token variable">`</span></span>backfile_name<span class="token operator">=</span>movie_<span class="token variable">$date_now</span><span class="token function">cd</span> <span class="token variable">$backfile</span><span class="token function">mkdir</span> -p <span class="token variable">$backfile_name</span>mongodump -h 127.0.0.1:27017 -d <span class="token operator">&lt;</span>db<span class="token operator">></span> -u user_wheel -p 123456 -o <span class="token variable">$backfile_name</span><span class="token function">tar</span> zcf <span class="token variable">$backfile_name</span>.tar.gz <span class="token variable">$backfile_name</span><span class="token function">rm</span> -rf <span class="token variable">$backfile_name</span><span class="token comment" spellcheck="true"># 可以把备份文件上传到云服务器(七牛)</span><span class="token comment" spellcheck="true">#NODE_ENV=$backfile@$backfile_name node /home/upload.js</span></code></pre><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">crontab</span> -e <span class="token comment" spellcheck="true"># 凌晨13分</span>13 00 * * *  sh /home/backup.sh</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb 教程</title>
      <link href="/2017/08/02/mongodb-jiao-cheng/"/>
      <url>/2017/08/02/mongodb-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="`MongoDB`刚刚发布了其3.4.6版本，是目前最新的稳定版。"><code>MongoDB</code></a> 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似<code>json</code>的<code>bson</code>格式，因此可以存储比较复杂的数据类型。<code>Mongo</code>最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">社区版安装</a></p><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>Mac系统 可以通过<a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a>安装</p><pre class=" language-bash"><code class="language-bash"> brew update brew <span class="token function">install</span> mongodb</code></pre><p>要安装具有TLS / SSL支持的MongoDB二进制文件</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> mongodb --with-openssl</code></pre><p>安装最新开发版本</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> mongodb --devel</code></pre><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>下载和安装</li></ul><pre class=" language-bash"><code class="language-bash">  curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.5.10.tgz  <span class="token function">tar</span> -zxvf mongodb-osx-x86_64-3.5.10.tgz  <span class="token function">mkdir</span> -p mongodb  <span class="token function">cp</span> -R -n mongodb-osx-x86_64-3.5.10/ mongodb</code></pre><ul><li>配置环境变量 编辑 <code>~/.bashrc</code></li></ul><pre class=" language-bash"><code class="language-bash">    <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token operator">&lt;</span>mongodb-install-directory<span class="token operator">></span>/bin:<span class="token variable">$PATH</span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ol><li>创建数据目录</li></ol><p>在首次启动MongoDB之前，请创建<code>mongod</code>进程将写入数据的目录。<br>默认情况下，<code>mongod</code>进程使用<code>/data /db</code>目录。<br>如果创建一个除此之外的目录，则必须在此过程稍后再启动mongod进程时<br>在<code>dbpath</code>选项中指定该目录。</p><ol><li>设置数据目录读写权限</li></ol><pre class=" language-bash"><code class="language-bash">    <span class="token function">chmod</span> 755 -R /data/db</code></pre><ol><li><p>运行 Mongo DB</p><pre class=" language-bash"><code class="language-bash">mongod <span class="token comment" spellcheck="true"># 默认使用/data/db</span><span class="token comment" spellcheck="true"># 如果你的PATH 没有加入mongod 的目录</span><span class="token operator">&lt;</span>path to binary<span class="token operator">></span>/mongod<span class="token comment" spellcheck="true"># 可以通过 --dbpath 指定数据目录</span>mongod --dbpath <span class="token operator">&lt;</span>path to data directory<span class="token operator">></span></code></pre></li><li>开始使用Mongo DB<br>停止运行，按键<code>Ctrl + C</code> 在mongod 所运行的终端</li></ol><h2 id="Mongo-Shell"><a href="#Mongo-Shell" class="headerlink" title="Mongo Shell"></a>Mongo Shell</h2><p>要启动<code>mongo shell</code>并连接到在<code>localhost</code>上运行的<code>MongoDB</code>实例使用默认端口：27017</p><ol><li>在终端窗口中提示（或Windows的命令提示符），进入您的mongodb安装目录：<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token operator">&lt;</span>mongodb installation dir<span class="token operator">></span>./bin/mongo</code></pre></li><li><p>可选参数</p><p><code>.mongorc.js</code> 文件</p><p>启动时，<code>mongo</code>会检查用户的<code>HOME</code>目录，找到一个名为<code>.mongorc.js</code>的JavaScript文件。<br>如果找到，<code>mongo</code>首先解释<code>.mongorc.js</code>的内容，然后再显示提示。<br>如果您使用<code>shell</code>来评估<code>JavaScript</code>文件或表达式，可以通过在命令行中使用<code>--eval</code>选项，或者通过将.js文件指定为<code>mongo</code>，<code>mongo</code>将在<code>JavaScript</code>完成处理之后读取<code>.mongorc.js</code>文件<br>。<br>您可以通过使用<code>--norc</code>选项来阻止<code>.mongorc.js</code>被加载。</p></li><li><p>全局配置文件</p><p> UNIX 环境 <code>/etc/mongorc.js</code><br> WIndows 环境 <code>％ProgramData％\ MongoDB</code> 目录中。</p></li><li><p>使用</p><p>要使用身份验证和非标准端口连接到远程主机上的数据库，请使用以下格式：</p><pre class=" language-bash?linenums"><code class="language-bash?linenums">mongo --username <user> --password <pass> --host <host> --port 28015</code></pre><p>或者简单形式</p><pre class=" language-bash"><code class="language-bash">    mongo -u <span class="token operator">&lt;</span>user<span class="token operator">></span> -p <span class="token operator">&lt;</span>pass<span class="token operator">></span> --host <span class="token operator">&lt;</span>host<span class="token operator">></span> --port 28015</code></pre><p>要在启动shell会话之前不执行〜/ .mongorc.js文件执行JavaScript文件，请使用以下格式：</p><pre class=" language-bash"><code class="language-bash">    mongo --shell --norc alternate-environment.js</code></pre><p>要通过身份验证执行JavaScript文件，使用提示而不是命令行提供的密码，请使用以下格式：</p><pre class=" language-bash"><code class="language-bash">    mongo script-file.js -u <span class="token operator">&lt;</span>user<span class="token operator">></span> -p</code></pre><p>要打印以JSON格式返回查询，请使用<code>--eval</code>选项从系统提示符中使用以下格式：</p><pre class=" language-bash"><code class="language-bash">mongo --eval <span class="token string">'db.&lt;collection>.find().forEach(printjson)'</span></code></pre><h2 id="mongo-db-配置文件"><a href="#mongo-db-配置文件" class="headerlink" title="mongo db 配置文件"></a>mongo db 配置文件</h2></li><li>命令</li></ol><pre class=" language-bash"><code class="language-bash"> mongod --config /etc/mongod.conf mongos --config /etc/mongos.conf<span class="token comment" spellcheck="true"># 或者 简化形式</span>mongod -f /etc/mongod.confmongos -f /etc/mongos.conf</code></pre><ol><li>配置文件YAML<br>注意yaml 不能使用制表符缩进，要用空格</li></ol><pre><code> systemLog:   destination: file   path: "/var/log/mongodb/mongod.log"   logAppend: true storage:   journal:      enabled: trueprocessManagement:   fork: truenet:   bindIp: 127.0.0.1   port: 27017setParameter:   enableLocalhostAuthBypass: false</code></pre><h2 id="命令-CRUD-操作"><a href="#命令-CRUD-操作" class="headerlink" title="命令 CRUD 操作"></a>命令 CRUD 操作</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>MongoDB提供以下方法将文档插入到集合中：</p><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/#db.collection.insertOne" target="_blank" rel="noopener">db.collection.insertOne()</a></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/#db.collection.insertMany" target="_blank" rel="noopener">db.collection.insertMany()</a> 最新3.2 版本</li></ul><p>在MongoDB中，插入操作指向单个集合。 MongoDB中的所有写入操作都是基于单个文档的级别的。<br><img src="https://docs.mongodb.com/manual/_images/crud-annotated-mongodb-insertOne.bakedsvg.svg" alt="enter description here"></p><pre class=" language-javascript"><code class="language-javascript">    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'inventory'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span> item<span class="token punctuation">:</span> <span class="token string">"journal"</span><span class="token punctuation">,</span>        qty<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"blank"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        size<span class="token punctuation">:</span> <span class="token punctuation">{</span> h<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span> uom<span class="token punctuation">:</span> <span class="token string">"cm"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> item<span class="token punctuation">:</span> <span class="token string">"mat"</span><span class="token punctuation">,</span>        qty<span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">,</span>        tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"gray"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        size<span class="token punctuation">:</span> <span class="token punctuation">{</span> h<span class="token punctuation">:</span> <span class="token number">27.9</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token number">35.5</span><span class="token punctuation">,</span> uom<span class="token punctuation">:</span> <span class="token string">"cm"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> item<span class="token punctuation">:</span> <span class="token string">"mousepad"</span><span class="token punctuation">,</span>        qty<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"gel"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        size<span class="token punctuation">:</span> <span class="token punctuation">{</span> h<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token number">22.85</span><span class="token punctuation">,</span> uom<span class="token punctuation">:</span> <span class="token string">"cm"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//result 是一个_id 数组</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/#db.collection.find" target="_blank" rel="noopener">db.collection.find()</a></li></ul><p><img src="https://docs.mongodb.com/manual/_images/crud-annotated-mongodb-find.bakedsvg.svg" alt="enter description here"></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'inventory'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           size<span class="token punctuation">:</span> <span class="token punctuation">{</span> h<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span> uom<span class="token punctuation">:</span> <span class="token string">"cm"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 高度小于 15</span>    <span class="token keyword">var</span> cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'inventory'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           <span class="token string">"size.h"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> $lt<span class="token punctuation">:</span> <span class="token number">15</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/#db.collection.updateOne" target="_blank" rel="noopener">db.collection.updateOne() </a></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/#db.collection.updateMany" target="_blank" rel="noopener">db.collection.updateMany()</a></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/#db.collection.replaceOne" target="_blank" rel="noopener">db.collection.replaceOne()</a></li></ul><p><img src="http://7xouu0.com1.z0.glb.clouddn.com/1501664080677.jpg" alt="enter description here"></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/#db.collection.deleteOne" target="_blank" rel="noopener">db.collection.deleteOne()</a></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.deleteMany/#db.collection.deleteMany" target="_blank" rel="noopener">db.collection.deleteMany()</a></li></ul><p><img src="http://7xouu0.com1.z0.glb.clouddn.com/1501664188511.jpg" alt="enter description here"></p><h3 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h3><p><code>MongoDB</code>支持执行字符串内容的文本搜索的查询操作。要执行文本搜索，<code>MongoDB</code>使用文本索引和<code>$text</code>操作符。<br>例子</p><pre class=" language-javascript"><code class="language-javascript"> # 创建商店 db<span class="token punctuation">.</span>stores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>   <span class="token punctuation">[</span>     <span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Java Hut"</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">"Coffee and cakes"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Burger Buns"</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">"Gourmet hamburgers"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Coffee Shop"</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">"Just coffee"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Clothes Clothes Clothes"</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">"Discount clothing"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Java Shopping"</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">"Indonesian goods"</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>全文索引</strong></p><p>要执行文本搜索查询，您必须在集合上具有文本索引。一个集合只能有一个文本搜索索引，但该索引可以覆盖多个字段。</p><pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>stores<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">"text"</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>操作</strong><br>您可以使用以下查询来查找包含“coffee”，“shop”和“java”列表中任何术语的所有商店：</p><pre class=" language-javascript"><code class="language-javascript">    db<span class="token punctuation">.</span>stores<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> $text<span class="token punctuation">:</span> <span class="token punctuation">{</span> $search<span class="token punctuation">:</span> <span class="token string">"java coffee shop"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>您还可以通过将其包装成双引号来搜索确切的短语。例如，以下将找到包含“java”或“咖啡店”的所有文档：</p><pre class=" language-javascript"><code class="language-javascript"> db<span class="token punctuation">.</span>stores<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> $text<span class="token punctuation">:</span> <span class="token punctuation">{</span> $search<span class="token punctuation">:</span> <span class="token string">"java \"coffee shop\""</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>要排除一个单词，您可以添加一个“ - ”字符。例如，要查找包含“java”或“shop”而不是“coffee”的所有商店，请使用以下命令：</p><pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>stores<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> $text<span class="token punctuation">:</span> <span class="token punctuation">{</span> $search<span class="token punctuation">:</span> <span class="token string">"java shop -coffee"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>stores<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>       <span class="token punctuation">{</span> $text<span class="token punctuation">:</span> <span class="token punctuation">{</span> $search<span class="token punctuation">:</span> <span class="token string">"java coffee shop"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span> score<span class="token punctuation">:</span> <span class="token punctuation">{</span> $meta<span class="token punctuation">:</span> <span class="token string">"textScore"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> score<span class="token punctuation">:</span> <span class="token punctuation">{</span> $meta<span class="token punctuation">:</span> <span class="token string">"textScore"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h2 id="可视化管理工具"><a href="#可视化管理工具" class="headerlink" title="可视化管理工具"></a>可视化管理工具</h2><h3 id="MongoDB-Cloud-Manager"><a href="#MongoDB-Cloud-Manager" class="headerlink" title="MongoDB Cloud Manager"></a><a href="https://www.mongodb.com/cloud/cloud-manager?jmp=docs&amp;_ga=1.170083235.2005306875.1453858874" target="_blank" rel="noopener">MongoDB Cloud Manager</a></h3><p><code>MongoDB Cloud Manager</code>是官方推出的运维自动化管理系统，是企业版才支持的功能，社区用户也可以下载试用。</p><ul><li><code>MongoDB</code> 集群（复制集、分片）的自动化部署</li><li>集群监控、及报警定制</li><li>自动数据备份与还原</li></ul><h3 id="MongoDB-compass"><a href="#MongoDB-compass" class="headerlink" title="MongoDB compass"></a><a href="https://www.mongodb.com/products/compass?jmp=docs" target="_blank" rel="noopener">MongoDB compass</a></h3><blockquote><p><code>MongoDB compass</code> 也是官方推出的可视化管理工具，企业版才支持，<code>compass</code> 与 <code>Cloud Manager</code> 功能互补，<code>Cloud Manager</code> 偏向于部署、运维、监控，而 <code>compass</code> 则偏向于数据管理、查询优化等，其主要功能包括</p></blockquote><ul><li>数据分布可视化，自动分析各个字段取值的分布情况</li><li>支持 CRUD 操作</li><li>索引自动分析及优化建议</li><li>explain 的结果可视化</li></ul><h3 id="MongoDB-Atlas"><a href="#MongoDB-Atlas" class="headerlink" title="MongoDB Atlas"></a><a href="https://www.mongodb.com/cloud?jmp=docs&amp;_ga=1.150153781.2005306875.1453858874" target="_blank" rel="noopener">MongoDB Atlas</a></h3><blockquote><p><code>MongoDB</code>官方提供的 <code>DBaaS</code> 服务（<code>Database as a Service</code>），目前支持在 <code>Amazon AWS</code> 上构建 MongoDB 的云服务，未来有可能会支持更多的云厂商（ 例如<code>Azure</code>、<code>Alibaba Cloud</code>等）并通过<code>Cloud Manager + compass</code> 来提供可视化的数据管理。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS抓包工具</title>
      <link href="/2016/11/23/ios-zhua-bao-gong-ju/"/>
      <url>/2016/11/23/ios-zhua-bao-gong-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在iOS开发过程中，抓包是常见的必备技能之一。这里我们主要介绍一下Mac下的抓包利器Charles（文中版本：4.0.1）。它可以非常方便的抓取Http/Https请求，从而提高我们的开发效率。本文中不提供破解版安装使用说明（网上一大堆），建议使用正版，官方dmg下载地址：<a href="https://www.chrelesproxy.com/download/" target="_blank" rel="noopener">Charlesproxy</a></p></blockquote><a id="more"></a><p>破解版:<a href="http://charles.iiilab.com" target="_blank" rel="noopener">http://charles.iiilab.com</a>)</p><h2 id="如何抓取Http请求？"><a href="#如何抓取Http请求？" class="headerlink" title="如何抓取Http请求？"></a>如何抓取Http请求？</h2><ul><li>安装完成之后打开Charles，设置端口号:8888（端口号可以自定义）。</li></ul><p>选择“Proxy”菜单下的“Proxy Settings”子菜单。打开“Proxy Settings”对话框：<br><img src="https://dn-imjun.qbox.me/chreles1.jpg" alt=""></p><ul><li>在“Proxy Settings”对话框中设置端口号:8888，并勾选“Enable transparent Http proxying”</li></ul><p><img src="https://dn-imjun.qbox.me/chreles2.jpg" alt=""></p><ul><li>打开“网络偏好设置”查看电脑IP地址：</li></ul><p><img src="https://dn-imjun.qbox.me/chreles3.jpg" alt=""></p><ul><li>设置手机网络（iOS）<br><img src="https://dn-imjun.qbox.me/chreles4.jpg" alt=""></li></ul><ul><li>打开需要抓包的手机APP，初次使用时，Charles会弹出确认对话框，直接点击”Allow”按钮后就可以看到对应的请求数据</li></ul><p><strong>温馨提示</strong>：抓完包之后，请把手机WiFi中的HTTP代理关闭。不然可能造成iOS无法访问网络。</p><h2 id="如何抓取Https请求"><a href="#如何抓取Https请求" class="headerlink" title="如何抓取Https请求?"></a>如何抓取Https请求?</h2><ol><li>电脑安装SSL证书</li></ol><p>选中Charles，在“Help”菜单中选择—&gt;“SSL Proxying”—&gt;“Install Charles Root Certificate”会自动打开钥匙串访问窗口<br><img src="https://dn-imjun.qbox.me/chreles5.jpg" alt=""><br>在“钥匙串访问”窗口中找到对应的证书，双击打开。设置“使用证书时”项为：始终信任。<br><img src="https://dn-imjun.qbox.me/chreles6.jpg" alt=""></p><p>填写管理员密码更新设置。<br><img src="https://dn-imjun.qbox.me/chreles7.jpg" alt=""></p><ol><li>手机安装证书（使用Safari方式）</li></ol><p>请确保手机已经设置好手动代理（具体方式参照上面HTTP抓包设置方式）。</p><p>在手机Safari浏览器中输入下面的链接地址：<br><a href="http://charlesproxy.com/getssl" target="_blank" rel="noopener">Charles Proxy</a>。手机会自动跳转安装“Charles Proxy SSL Proxying”描述文件。如下图所示：<br><img src="https://dn-imjun.qbox.me/chreles8.jpg" alt=""><br>点击“安装”按钮，会提示输入手机密码，然后确认安装。<br><img src="https://dn-imjun.qbox.me/chreles9.jpg" alt=""><br>以上便完成手机SSL证书安装步骤。</p><ol><li>在Charles工具栏上点击设置按钮，选择“SSL Proxying Settings…”</li></ol><p>打开“SSL Proxying Settings”对话框</p><p><img src="https://dn-imjun.qbox.me/chreles10.jpg" alt=""><br>点击“Add”添加：Host中输入*表示匹配所有主机。https默认端口号：443<br><img src="https://dn-imjun.qbox.me/chreles11.jpg" alt=""><br>添加完成显示结果如下<br><img src="https://dn-imjun.qbox.me/chreles12.jpg" alt=""></p><ol><li>测试</li></ol><ul><li>安装手机证书之前测试结果如下图所示<br><img src="https://dn-imjun.qbox.me/chreles13.jpg" alt=""></li></ul><ul><li>安装手机证书之后测试结果如下图所示：<br><img src="https://dn-imjun.qbox.me/chreles14.jpg" alt=""></li></ul><p>针对Charles代理访问https有些正常有些失败的处理方法（一般https只要打开charles 的”Enable SSL Proxying”代理就能访问）</p><h2 id="如果没有Wifi，我们还可以这样抓包？（本文不做详解）"><a href="#如果没有Wifi，我们还可以这样抓包？（本文不做详解）" class="headerlink" title="如果没有Wifi，我们还可以这样抓包？（本文不做详解）"></a>如果没有Wifi，我们还可以这样抓包？（本文不做详解）</h2><ol><li>抓包之rvictl方式</li></ol><ul><li>开启虚拟端口：<code>rvictl -s</code></li><li>关闭虚拟端口：<code>rvictl -x</code></li><li>然后使用<code>wireshark</code>来捕捉这个端口数据。</li></ul><ol><li>抓包之tcpdump方式<br>有个很大的缺点是手机需要越狱。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper教程</title>
      <link href="/2016/07/27/zookeeper-jiao-cheng/"/>
      <url>/2016/07/27/zookeeper-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>zookeeper 是一个开源的分布式协调服务，由知名互联网公司雅虎公司创建，是Google Chubby 开源实现。 他致力于提供一个高性能，高可用，且具有严格的顺序访问控制能力的分布式协调服务。分布式应用可以基于诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知，集群管理、Master选举、分布式锁和分布式队列。 </p></blockquote><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="zookeeper-应用场景"><a href="#zookeeper-应用场景" class="headerlink" title="zookeeper 应用场景"></a>zookeeper 应用场景</h2><h3 id="数据的发布、订阅"><a href="#数据的发布、订阅" class="headerlink" title="数据的发布、订阅"></a>数据的发布、订阅</h3><p>一方可以发布数据另一方接受数据</p><p>通常数据的订阅、发布 有两种方式：push / pull<br>zk 采用两种方式相结合</p><p>发布者将数据发布到集群的节点上，订阅者通过一定的方法告诉服务器，我对那个节点的数据感兴趣，那个服务器在这些节点的数据发生变化时，就通知客户端，客户端得到通知后就可以去服务端获取数据</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h3 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h3><ol><li>首先DB在启动的是先把自己在zk 注册成一个临时的节点，zk的节点有两种一种是永久节点，另一种是临时节点。临时节点在服务器出现问题的时候，节点会自动从zk上删除，那么这样zk上的服务器列表是最新的可用的列表</li><li>客户端需要读写数据库的时候首先去zk得到所有可用的DB连接信息（一张列表）</li><li>客户端随机选择一台进行连接</li><li>当客户端发现连接的时候再次从zk上获取可用的DB信息，当然也可以在刚获取的那个列表里移除掉不可用的连接后再选择一个DB连接</li></ol><h3 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h3><pre><code> 顾名思义就是提供名称服务，例如数据库表格ID，一般有两种ID，一种是分布式中使用的，一种是自增长的ID，UUID 可以在分布式中使用但由于没有规律较难理解，友好性不好，我们可以使用zk来生成一个顺序增长的，可以在集群环境下使用。</code></pre><h3 id="分布式协调-通知"><a href="#分布式协调-通知" class="headerlink" title="分布式协调/通知"></a>分布式协调/通知</h3><p>心跳检测<br>在分布式系统中，我们常常需要知道某个服务器是否可用，传统开发中，可以通过ping 某个主机。zk 中我们让所有机器都注册到一个临时节点，我们判断一个机器是否可用，我们只需判断这个节点zk是否存在就可以了，不需要直接去连接需要检查的机器，降低系统的复杂度。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>安装</p><p>  <code>wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.3.6/</code></p></li><li><p>解压</p><p>   <code>tar zxf zookeeper-3.3.6  &amp;&amp; mv zookeeper-3.3.6 /usr/local/zookeeper</code></p></li><li><p>配置</p><p>  <code>vi /usr/local/&lt;zookeeper&gt;/conf/zoo.cnf</code></p></li></ol><pre><code> ```      server.1=host:port:port-leader       server.2=host:port:port-leader         server.3=host:port:port-leader       touch myid &amp;&amp; echo "&lt;id&gt;" &gt; myid ```</code></pre><ol><li><p>启动/停止</p><p>  <code>./zkServer start | stop</code></p></li><li><p>客户端连接<br>  <code>./zkCli</code></p></li></ol><h2 id="master选举"><a href="#master选举" class="headerlink" title="master选举"></a>master选举</h2><p><strong>架构图</strong>:<br><img src="https://dn-imjun.qbox.me/2016-07-25-11-10-26.jpg" alt=""><br><strong>程序流程图:</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-11-03.jpg" alt=""><br><strong>网络抖动:</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-11-41.jpg" alt=""><br><strong>核心类图:</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-12-08.jpg" alt=""></p><p>master 节点何时会删除</p><ol><li><p>master 会主动放权</p></li><li><p>master 节点down机</p></li><li><p>master 节点网络斗动，会发生新一轮选举</p></li><li><p>如果master 和上一轮选举的master 不是同一个节点，不一致时发生资源迁移</p></li></ol><p>优化：让上一轮选举出的master 再新一轮选举中优先采用master 节点</p><p><strong>代码:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>mastersel<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>serialize<span class="token punctuation">.</span>SerializableSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaderSelectorZkClient</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//启动的服务个数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>        CLIENT_QTY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//zookeeper服务器的地址</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  String  ZOOKEEPER_SERVER <span class="token operator">=</span> <span class="token string">"10.3.1.11:2181,10.3.1.11:2182,10.3.1.11:2183"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存所有zkClient的列表</span>        List<span class="token operator">&lt;</span>ZkClient<span class="token operator">></span>  clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ZkClient<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存所有服务的列表</span>        List<span class="token operator">&lt;</span>WorkServer<span class="token operator">></span>  workServers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>WorkServer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CLIENT_QTY<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建zkClient</span>                ZkClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span>ZOOKEEPER_SERVER<span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">,</span> <span class="token number">105000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SerializableSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建serverData</span>                RunningData runningData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunningData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                runningData<span class="token punctuation">.</span><span class="token function">setCid</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                runningData<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Client #"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建服务</span>                WorkServer  workServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkServer</span><span class="token punctuation">(</span>runningData<span class="token punctuation">)</span><span class="token punctuation">;</span>                workServer<span class="token punctuation">.</span><span class="token function">setZkClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>                workServers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>workServer<span class="token punctuation">)</span><span class="token punctuation">;</span>                workServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"敲回车键退出！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shutting down..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> WorkServer workServer <span class="token operator">:</span> workServers <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    workServer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                           <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> ZkClient client <span class="token operator">:</span> clients <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>running data 实体类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>mastersel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunningData</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4260577459043203630L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long cid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Long <span class="token function">getCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCid</span><span class="token punctuation">(</span>Long cid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cid <span class="token operator">=</span> cid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>工作服务器类:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>mastersel<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>IZkDataListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkInterruptedException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkNoNodeException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkNodeExistsException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>CreateMode<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ScheduledExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ZkClient zkClient<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MASTER_PATH <span class="token operator">=</span> <span class="token string">"/master"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IZkDataListener dataListener<span class="token punctuation">;</span>    <span class="token keyword">private</span> RunningData serverData<span class="token punctuation">;</span>    <span class="token keyword">private</span> RunningData masterData<span class="token punctuation">;</span>    <span class="token keyword">private</span> ScheduledExecutorService delayExector <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> delayTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WorkServer</span><span class="token punctuation">(</span>RunningData rd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverData <span class="token operator">=</span> rd<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                <span class="token comment" spellcheck="true">//takeMaster();</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>masterData<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> masterData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>serverData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">takeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    delayExector<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token function">takeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> delayTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ZkClient <span class="token function">getZkClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> zkClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setZkClient</span><span class="token punctuation">(</span>ZkClient zkClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zkClient <span class="token operator">=</span> zkClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"server has startup..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>MASTER_PATH<span class="token punctuation">,</span> dataListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">takeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"server has stoped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        delayExector<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zkClient<span class="token punctuation">.</span><span class="token function">unsubscribeDataChanges</span><span class="token punctuation">(</span>MASTER_PATH<span class="token punctuation">,</span> dataListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">releaseMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">takeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>running<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MASTER_PATH<span class="token punctuation">,</span> serverData<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">;</span>            masterData <span class="token operator">=</span> serverData<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serverData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" is master"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            delayExector<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">releaseMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNodeExistsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RunningData runningData <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>MASTER_PATH<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>runningData <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">takeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                masterData <span class="token operator">=</span> runningData<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ignore;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">releaseMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>MASTER_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RunningData eventData <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>MASTER_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>            masterData <span class="token operator">=</span> eventData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>masterData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>serverData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNoNodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkInterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">checkMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h2><p><strong>架构图:</strong><br><img src="https://dn-imjun.qbox.me/2016-07-25-11-17-16.jpg" alt=""><br><strong>Manga Server 流程图:</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-17-48.jpg" alt=""><br><strong>WorkServer 流程图:</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-18-27.jpg" alt=""><br><strong>系统核心类图:</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-19-14.jpg" alt=""><br><strong>代码:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>subscribe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>IZkChildListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>IZkDataListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkNoNodeException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkNodeExistsException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManageServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String serversPath<span class="token punctuation">;</span>    <span class="token keyword">private</span> String commandPath<span class="token punctuation">;</span>    <span class="token keyword">private</span> String configPath<span class="token punctuation">;</span>    <span class="token keyword">private</span> ZkClient zkClient<span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerConfig config<span class="token punctuation">;</span>    <span class="token keyword">private</span> IZkChildListener childListener<span class="token punctuation">;</span>    <span class="token keyword">private</span> IZkDataListener dataListener<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> workServerList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ManageServer</span><span class="token punctuation">(</span>String serversPath<span class="token punctuation">,</span> String commandPath<span class="token punctuation">,</span>            String configPath<span class="token punctuation">,</span> ZkClient zkClient<span class="token punctuation">,</span> ServerConfig config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serversPath <span class="token operator">=</span> serversPath<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>commandPath <span class="token operator">=</span> commandPath<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zkClient <span class="token operator">=</span> zkClient<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configPath <span class="token operator">=</span> configPath<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IZkChildListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleChildChange</span><span class="token punctuation">(</span>String parentPath<span class="token punctuation">,</span>                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> currentChilds<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                workServerList <span class="token operator">=</span> currentChilds<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work server list changed, new list is "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">execList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                <span class="token comment" spellcheck="true">// ignore;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                String cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cmd:"</span><span class="token operator">+</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exeCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>commandPath<span class="token punctuation">,</span> dataListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span>serversPath<span class="token punctuation">,</span> childListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 1: list 2: create 3: modify     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exeCmd</span><span class="token punctuation">(</span>String cmdType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cmdType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">execList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cmdType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">execCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"modify"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cmdType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">execModify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error command!"</span> <span class="token operator">+</span> cmdType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">execList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>workServerList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">execCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zkClient<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>configPath<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNodeExistsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                zkClient<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>configPath<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNoNodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String parentDir <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>                        configPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>parentDir<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">execCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">execModify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        config<span class="token punctuation">.</span><span class="token function">setDbUser</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getDbUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_modify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>configPath<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNoNodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">execCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">initRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">unsubscribeChildChanges</span><span class="token punctuation">(</span>serversPath<span class="token punctuation">,</span> childListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        zkClient<span class="token punctuation">.</span><span class="token function">unsubscribeDataChanges</span><span class="token punctuation">(</span>commandPath<span class="token punctuation">,</span> dataListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Server Config:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>subscribe<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String dbUrl<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dbPwd<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dbUser<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDbUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dbUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDbUrl</span><span class="token punctuation">(</span>String dbUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dbUrl <span class="token operator">=</span> dbUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDbPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dbPwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDbPwd</span><span class="token punctuation">(</span>String dbPwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dbPwd <span class="token operator">=</span> dbPwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDbUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dbUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDbUser</span><span class="token punctuation">(</span>String dbUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dbUser <span class="token operator">=</span> dbUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ServerConfig [dbUrl="</span> <span class="token operator">+</span> dbUrl <span class="token operator">+</span> <span class="token string">", dbPwd="</span> <span class="token operator">+</span> dbPwd                <span class="token operator">+</span> <span class="token string">", dbUser="</span> <span class="token operator">+</span> dbUser <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Server data</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>subscribe<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerData</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ServerData [address="</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">", id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span>                <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>订阅发布入口:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>subscribe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>serialize<span class="token punctuation">.</span>BytesPushThroughSerializer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscribeZkClient</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  CLIENT_QTY <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  ZOOKEEPER_SERVER <span class="token operator">=</span> <span class="token string">"192.168.1.105:2181"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  CONFIG_PATH <span class="token operator">=</span> <span class="token string">"/config"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  COMMAND_PATH <span class="token operator">=</span> <span class="token string">"/command"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  SERVERS_PATH <span class="token operator">=</span> <span class="token string">"/servers"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception        <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ZkClient<span class="token operator">></span>  clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ZkClient<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>WorkServer<span class="token operator">></span>  workServers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>WorkServer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ManageServer manageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                ServerConfig initConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                initConfig<span class="token punctuation">.</span><span class="token function">setDbPwd</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                initConfig<span class="token punctuation">.</span><span class="token function">setDbUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/mydb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                initConfig<span class="token punctuation">.</span><span class="token function">setDbUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ZkClient clientManage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span>ZOOKEEPER_SERVER<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BytesPushThroughSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                manageServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManageServer</span><span class="token punctuation">(</span>SERVERS_PATH<span class="token punctuation">,</span> COMMAND_PATH<span class="token punctuation">,</span>CONFIG_PATH<span class="token punctuation">,</span>clientManage<span class="token punctuation">,</span>initConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                manageServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CLIENT_QTY<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ZkClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span>ZOOKEEPER_SERVER<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BytesPushThroughSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ServerData serverData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    serverData<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    serverData<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"WorkServer#"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    serverData<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"192.168.1."</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    WorkServer  workServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkServer</span><span class="token punctuation">(</span>CONFIG_PATH<span class="token punctuation">,</span> SERVERS_PATH<span class="token punctuation">,</span> serverData<span class="token punctuation">,</span> client<span class="token punctuation">,</span> initConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                    workServers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>workServer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    workServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token punctuation">}</span>                               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"敲回车键退出！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shutting down..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span> WorkServer workServer <span class="token operator">:</span> workServers <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        workServer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                               <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span> ZkClient client <span class="token operator">:</span> clients <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p><strong>Work Server 类:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>subscribe<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>IZkDataListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkNoNodeException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ZkClient zkClient<span class="token punctuation">;</span>    <span class="token keyword">private</span> String configPath<span class="token punctuation">;</span>    <span class="token keyword">private</span> String serversPath<span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerData serverData<span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerConfig serverConfig<span class="token punctuation">;</span>    <span class="token keyword">private</span> IZkDataListener dataListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WorkServer</span><span class="token punctuation">(</span>String configPath<span class="token punctuation">,</span> String serversPath<span class="token punctuation">,</span>            ServerData serverData<span class="token punctuation">,</span> ZkClient zkClient<span class="token punctuation">,</span> ServerConfig initConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zkClient <span class="token operator">=</span> zkClient<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serversPath <span class="token operator">=</span> serversPath<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configPath <span class="token operator">=</span> configPath<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverConfig <span class="token operator">=</span> initConfig<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverData <span class="token operator">=</span> serverData<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                String retJson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                ServerConfig serverConfigLocal <span class="token operator">=</span> <span class="token punctuation">(</span>ServerConfig<span class="token punctuation">)</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>retJson<span class="token punctuation">,</span>ServerConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">updateConfig</span><span class="token punctuation">(</span>serverConfigLocal<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new Work server config is:"</span><span class="token operator">+</span>serverConfig<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work server start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work server stop..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zkClient<span class="token punctuation">.</span><span class="token function">unsubscribeDataChanges</span><span class="token punctuation">(</span>configPath<span class="token punctuation">,</span> dataListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">registMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>configPath<span class="token punctuation">,</span> dataListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String mePath <span class="token operator">=</span> serversPath<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>serverData<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">createEphemeral</span><span class="token punctuation">(</span>mePath<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>serverData<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNoNodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>serversPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">registMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateConfig</span><span class="token punctuation">(</span>ServerConfig serverConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverConfig <span class="token operator">=</span> serverConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h2><p><strong>架构图</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-24-14.jpg" alt=""><br><strong>客户端流程</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-24-37.jpg" alt=""><br><strong>服务端主体流程图</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-25-00.jpg" alt=""><br><strong>Server 核心类图</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-25-18.jpg" alt=""><br><strong>代码结构:</strong><br><strong>客户端</strong><br><img src="https://dn-imjun.qbox.me/2016-07-25-11-26-25.jpg" alt=""><br><strong>服务端</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-26-59.jpg" alt=""></p><h2 id="命名服务-1"><a href="#命名服务-1" class="headerlink" title="命名服务"></a>命名服务</h2><p><strong>架构图</strong><br><img src="https://dn-imjun.qbox.me/2016-07-25-11-30-32.jpg" alt=""><br><strong>核心算法</strong><br><img src="https://dn-imjun.qbox.me/2016-07-25-11-30-51.jpg" alt=""><br><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>nameservice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkNodeExistsException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>serialize<span class="token punctuation">.</span>BytesPushThroughSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdMaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ZkClient client <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String server<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String nodeName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ExecutorService cleanExector <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> RemoveMethod<span class="token punctuation">{</span>        NONE<span class="token punctuation">,</span>IMMEDIATELY<span class="token punctuation">,</span>DELAY    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">IdMaker</span><span class="token punctuation">(</span>String zkServer<span class="token punctuation">,</span>String root<span class="token punctuation">,</span>String nodeName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>server <span class="token operator">=</span> zkServer<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nodeName <span class="token operator">=</span> nodeName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"server has stated..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>running<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"server has stopped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">freeResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BytesPushThroughSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cleanExector <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNodeExistsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//ignore;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">freeResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cleanExector<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            cleanExector<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            cleanExector <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>running<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"请先调用start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">ExtractId</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            index<span class="token operator">+=</span>nodeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> index <span class="token operator">&lt;=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">generateId</span><span class="token punctuation">(</span>RemoveMethod removeMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token function">checkRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String fullNodePath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String ourPath <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">createPersistentSequential</span><span class="token punctuation">(</span>fullNodePath<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>removeMethod<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>RemoveMethod<span class="token punctuation">.</span>IMMEDIATELY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ourPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>removeMethod<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>RemoveMethod<span class="token punctuation">.</span>DELAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cleanExector<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                    client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ourPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//node-0000000000, node-0000000001</span>        <span class="token keyword">return</span> <span class="token function">ExtractId</span><span class="token punctuation">(</span>ourPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>nameservice<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIdMaker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        IdMaker idMaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdMaker</span><span class="token punctuation">(</span><span class="token string">"localhost:2181"</span><span class="token punctuation">,</span>                <span class="token string">"/NameService/IdGen"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idMaker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String id <span class="token operator">=</span> idMaker<span class="token punctuation">.</span><span class="token function">generateId</span><span class="token punctuation">(</span>IdMaker<span class="token punctuation">.</span>RemoveMethod<span class="token punctuation">.</span>DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            idMaker<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="分布式队列"><a href="#分布式队列" class="headerlink" title="分布式队列"></a>分布式队列</h2><p><strong>架构图</strong><br><img src="https://dn-imjun.qbox.me/2016-07-25-11-31-24.jpg" alt=""><br><strong>offer 核心算法</strong><br><img src="https://dn-imjun.qbox.me/2016-07-25-11-31-32.jpg" alt=""><br><strong>poll 核心算法</strong><br><img src="https://dn-imjun.qbox.me/2016-07-25-11-31-40.jpg" alt=""><br><strong>核心代码</strong><br><strong>简单的队列</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ExceptionUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZkNoNodeException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedSimpleQueue</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> ZkClient zkClient<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> String root<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String Node_NAME <span class="token operator">=</span> <span class="token string">"n_"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DistributedSimpleQueue</span><span class="token punctuation">(</span>ZkClient zkClient<span class="token punctuation">,</span> String root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zkClient <span class="token operator">=</span> zkClient<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>T element<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String nodeFullPath <span class="token operator">=</span> root <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> <span class="token string">"/"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> Node_NAME <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">createPersistentSequential</span><span class="token punctuation">(</span>nodeFullPath <span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNoNodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">offer</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">convertToRuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> T <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String lhs<span class="token punctuation">,</span> String rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">getNodeNumber</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> Node_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token function">getNodeNumber</span><span class="token punctuation">(</span>rhs<span class="token punctuation">,</span> Node_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> String nodeName <span class="token operator">:</span> list <span class="token punctuation">)</span><span class="token punctuation">{</span>                String nodeFullPath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                    T node <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>nodeFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    zkClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>nodeFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> node<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZkNoNodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">convertToRuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">getNodeNumber</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> String nodeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">+=</span> Node_NAME<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> index <span class="token operator">&lt;=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>扩展队列</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>IZkChildListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedBlockingQueue</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">DistributedSimpleQueue</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token function">DistributedBlockingQueue</span><span class="token punctuation">(</span>ZkClient zkClient<span class="token punctuation">,</span> String root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">final</span> CountDownLatch    latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> IZkChildListener childListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IZkChildListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleChildChange</span><span class="token punctuation">(</span>String parentPath<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> currentChilds<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> childListener<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                T node <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> node <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> node<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                zkClient<span class="token punctuation">.</span><span class="token function">unsubscribeChildChanges</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> childListener<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shaojun<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>ZkClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>I0Itec<span class="token punctuation">.</span>zkclient<span class="token punctuation">.</span>serialize<span class="token punctuation">.</span>SerializableSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ScheduledExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDistributedBlockingQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ScheduledExecutorService delayExector <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> delayTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        ZkClient zkClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span><span class="token string">"localhost:2181"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SerializableSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> DistributedBlockingQueue<span class="token operator">&lt;</span>User<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistributedBlockingQueue</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span>zkClient<span class="token punctuation">,</span><span class="token string">"/Queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"xiao wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"xiao wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>            delayExector<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> delayTime <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ready poll!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            User u1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            User u2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>            delayExector<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                delayExector<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p><strong>架构图</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-32-54.jpg" alt=""><br><strong>核心算法流程图</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-33-12.jpg" alt=""><br><strong>全局事务锁的相关代码</strong></p><p><img src="https://dn-imjun.qbox.me/2016-07-25-11-41-10.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线工具列表</title>
      <link href="/2016/05/09/zai-xian-gong-ju-lie-biao/"/>
      <url>/2016/05/09/zai-xian-gong-ju-lie-biao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>程序员的工具箱。<br><a id="more"></a></p></blockquote><h2 id="Java源代码搜索"><a href="#Java源代码搜索" class="headerlink" title="Java源代码搜索"></a>Java源代码搜索</h2><blockquote><p><a href="http://grepcode.com/" target="_blank" rel="noopener">Grepcode</a>是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 </p></blockquote><p>同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。<br><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/grepcode1-1024x279.png" alt=""></p><h2 id="开源代码及文档搜索"><a href="#开源代码及文档搜索" class="headerlink" title="开源代码及文档搜索"></a>开源代码及文档搜索</h2><blockquote><p><a href="https://searchcode.com/" target="_blank" rel="noopener">Searchcode</a>是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/grepcode1-1024x279.png" alt="searchcode"></p><h2 id="在线UML制图"><a href="#在线UML制图" class="headerlink" title="在线UML制图"></a>在线UML制图</h2><blockquote><p><a href="https://www.processon.com/" target="_blank" rel="noopener">Processon</a>是一个在线协作绘图平台,为用户提供最强大、易用的作图工具!支持在线创作流程图、BPMN、UML图、UI界面原型设计、iOS界面原型设计等。</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/processon.png" alt=""></p><h2 id="Json在线验证及格式化"><a href="#Json在线验证及格式化" class="headerlink" title="Json在线验证及格式化"></a>Json在线验证及格式化</h2><blockquote><p>我用过很多json在线格式化的工具，经过实践，<a href="http://json.cn/" target="_blank" rel="noopener">json.cn</a>是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。</p></blockquote><h2 id="Diff-Check"><a href="#Diff-Check" class="headerlink" title="Diff Check"></a>Diff Check</h2><blockquote><p>使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。<a href="https://www.diffchecker.com/" target="_blank" rel="noopener">diffchecker</a>很不错。</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/differ-1024x612.png" alt=""></p><h2 id="MarkDown编辑器"><a href="#MarkDown编辑器" class="headerlink" title="MarkDown编辑器"></a>MarkDown编辑器</h2><ul><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd</a></li><li><a href="https://segmentfault.com/write?freshman=1" target="_blank" rel="noopener">segmentfault</a></li><li><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a> Mac平台下我的最爱</li></ul><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><h3 id="Maven依赖查询"><a href="#Maven依赖查询" class="headerlink" title="Maven依赖查询"></a>Maven依赖查询</h3><blockquote><p><a href="http://mvnrepository.com/" target="_blank" rel="noopener">mvnrepository</a>这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/log4j1.png" alt=""></p><h3 id="Apache-Maven"><a href="#Apache-Maven" class="headerlink" title="Apache Maven"></a>Apache Maven</h3><blockquote><p><a href="http://maven.apache.org/" target="_blank" rel="noopener">Apache Maven</a>使用声明进行构建并进行依赖管理，偏向于使用约定而不是配置进行构建。Maven优于Apache Ant。后者采用了一种过程化的方式进行配置，所以维护起来相当困难。</p></blockquote><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><blockquote><p><a href="http://www.gradle.org/" target="_blank" rel="noopener">Gradle</a>Gradle采用增量构建。Gradle通过Groovy编程而不是传统的XML声明进行配置。Gradle可以很好地配合Maven进行依赖管理，并且把Ant脚本当作头等公民。</p></blockquote><h2 id="在线代码运行"><a href="#在线代码运行" class="headerlink" title="在线代码运行"></a>在线代码运行</h2><blockquote><p><a href="http://tool.lu/coderunner/" target="_blank" rel="noopener">coderunner</a>可以在线运行php,c,c++,go,python,java,groovy等代码。基本是很少使用。</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/coderunner-1024x178.png" alt=""></p><h2 id="在线翻译"><a href="#在线翻译" class="headerlink" title="在线翻译"></a>在线翻译</h2><p><a href="https://translate.google.cn/" target="_blank" rel="noopener">谷歌翻译</a><br><a href="http://fanyi.baidu.com/" target="_blank" rel="noopener">百度翻译</a><br><a href="http://fanyi.youdao.com/" target="_blank" rel="noopener">有道翻译</a></p><h2 id="SQL自动生成Java代码"><a href="#SQL自动生成Java代码" class="headerlink" title="SQL自动生成Java代码"></a>SQL自动生成Java代码</h2><blockquote><p><a href="http://www.autojcode.com/code/sql2class.jsp" target="_blank" rel="noopener">AutoJCode</a>可以从sql的建表语句中生成一个DO类。</p></blockquote><h2 id="json生成java类"><a href="#json生成java类" class="headerlink" title="json生成java类"></a>json生成java类</h2><p><a href="http://www.bejson.com/json2javapojo/" target="_blank" rel="noopener">json2java</a></p><h2 id="SQL美化-格式化-压缩"><a href="#SQL美化-格式化-压缩" class="headerlink" title="SQL美化/格式化/压缩"></a>SQL美化/格式化/压缩</h2><p><a href="http://tool.lu/sql/" target="_blank" rel="noopener">sql在线美化，格式化，压缩</a></p><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><p><a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">编码转换</a>站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。</p><h2 id="Corn表达式生成"><a href="#Corn表达式生成" class="headerlink" title="Corn表达式生成"></a>Corn表达式生成</h2><blockquote><p><a href="https://zh.wikipedia.org/zh-sg/Cron" target="_blank" rel="noopener">Cron</a>一般用于配置定时任务的执行。没有什么特别好的网站，<a href="http://www.pdtools.net/tools/becron.jsp" target="_blank" rel="noopener">pdtools</a>  还可以吧，基本可以满足需求。</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/corn.png" alt=""></p><h2 id="正则验证"><a href="#正则验证" class="headerlink" title="正则验证"></a>正则验证</h2><blockquote><p><a href="http://tool.chinaz.com/tools/regexgenerate" target="_blank" rel="noopener">站长工具</a>提供的正则代码生成。</p></blockquote><h2 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%96%93%E6%88%B3" target="_blank" rel="noopener">时间戳</a> (英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。</p></blockquote><p><a href="http://tool.chinaz.com/Tools/unixtime.aspx" target="_blank" rel="noopener">站长工具</a>提供的时间戳转换。</p><h2 id="世界时间转换"><a href="#世界时间转换" class="headerlink" title="世界时间转换"></a>世界时间转换</h2><p>世界各地时间转换，我比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。</p><h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><blockquote><p>站长工具中的<a href="http://tool.chinaz.com/tools/textencrypt.aspx" target="_blank" rel="noopener">加密解密</a></p></blockquote><h2 id="单位换算"><a href="#单位换算" class="headerlink" title="单位换算"></a>单位换算</h2><blockquote><p><a href="http://www.convertworld.com/zh-hans/" target="_blank" rel="noopener">convertworld</a>是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/04/convertworld.png" alt="convertworld"></p><h2 id="在线调色板"><a href="#在线调色板" class="headerlink" title="在线调色板"></a>在线调色板</h2><blockquote><p><a href="http://tool.chinaz.com/Tools/OnlineColor.aspx" target="_blank" rel="noopener">在线调色板</a></p></blockquote><h2 id="常用对照表"><a href="#常用对照表" class="headerlink" title="常用对照表"></a>常用对照表</h2><ul><li><a href="http://tool.oschina.net/commons?type=4" target="_blank" rel="noopener">ASCII对照表</a></li><li><a href="http://tool.oschina.net/commons?type=5" target="_blank" rel="noopener">HTTP状态码</a></li><li><a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">HTTP Content-type</a></li><li><a href="http://tool.oschina.net/commons?type=7" target="_blank" rel="noopener">TCP/UDP常见端口参考</a></li><li><a href="http://tool.oschina.net/commons?type=2" target="_blank" rel="noopener">HTML转义字符</a></li><li><a href="http://tool.oschina.net/commons?type=3" target="_blank" rel="noopener">RGB颜色参考</a></li></ul><h2 id="欢迎补充"><a href="#欢迎补充" class="headerlink" title="欢迎补充~"></a>欢迎补充~</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nio文件读写操作</title>
      <link href="/2016/04/12/nio-wen-jian-du-xie-cao-zuo/"/>
      <url>/2016/04/12/nio-wen-jian-du-xie-cao-zuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nio 是New IO 的简称，在jdk1.4 里提供的新api 。Sun 官方标榜的特性如下： 为所有的原始类型提供(Buffer)缓存支持。字符集编码解码解决方案。 Channel ：一个新的原始I/O 抽象。 支持锁和内存映射文件的文件访问接口。 提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O 。                 – 摘抄<a href="http://baike.baidu.com/link?url=0RUl92U3LPlc5CgZbBAqVtjxbkH-esxau7LX6iEWLtUBESNf7xuDuTbRJ8A3Ruf0LlD_i25c1Bt3N2r_RnMH9zDzqaZ3bgMmMLitEQ8qYfhk_2ZRqmvJW5-gtskoZDi7w9BO7mdHxXybb3KekHpul_" target="_blank" rel="noopener">百度百科</a></p></blockquote><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>RandomAccessFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIO</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">int</span> bufSize <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一次读取的字节长度</span>    File fin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\test\\readFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取的文件</span>    File fout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\test\\writeFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写出的文件</span>    Date startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileChannel fcin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteBuffer rBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>bufSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileChannel fcout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> <span class="token string">"rws"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteBuffer wBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>bufSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readFileByLine</span><span class="token punctuation">(</span>bufSize<span class="token punctuation">,</span> fcin<span class="token punctuation">,</span> rBuffer<span class="token punctuation">,</span> fcout<span class="token punctuation">,</span> wBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    Date endDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>startDate<span class="token operator">+</span><span class="token string">"|"</span><span class="token operator">+</span>endDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试执行时间</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFileByLine</span><span class="token punctuation">(</span><span class="token keyword">int</span> bufSize<span class="token punctuation">,</span> FileChannel fcin<span class="token punctuation">,</span>      ByteBuffer rBuffer<span class="token punctuation">,</span> FileChannel fcout<span class="token punctuation">,</span> ByteBuffer wBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String enterStr <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>bufSize<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//temp：由于是按固定字节读取，在一次读取中，第一行和最后一行经常是不完整的行，因此定义此变量来存储上次的最后一行和这次的第一行的内容，</span>      <span class="token comment" spellcheck="true">//并将之连接成完成的一行，否则会出现汉字被拆分成2个字节，并被提前转换成字符串而乱码的问题，数组大小应大于文件中最长一行的字节数</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>fcin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>rBuffer<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> rSize <span class="token operator">=</span> rBuffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rBuffer<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>        rBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//windows下ascii值13、10是换行和回车，unix下ascii值10是换行</span>        <span class="token comment" spellcheck="true">//从开头顺序遍历，找到第一个换行符</span>        <span class="token keyword">int</span> startNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>bs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找到换行字符</span>            startNum<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//temp已经存储了上一次读取的最后一行，因此遍历找到空字符位置，继续存储此次的第一行内容，连接成完成一行</span>                length<span class="token operator">=</span>i<span class="token operator">+</span>k<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  temp<span class="token punctuation">[</span>k<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">=</span>bs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将拼凑出来的完整的一行转换成字符串</span>        String tempString1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清空temp数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//从末尾倒序遍历，找到第一个换行符</span>        <span class="token keyword">int</span> endNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>rSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>bs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            endNum<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录最后一个换行符的位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>bs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将此次读取的最后一行的不完整字节存储在temp数组，用来跟下一次读取的第一行拼接成完成一行</span>              bs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//去掉第一行和最后一行不完整的，将中间所有完整的行转换成字符串</span>        String tempString2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> startNum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> endNum<span class="token operator">-</span>startNum<span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接两个字符串</span>        String tempString <span class="token operator">=</span> tempString1 <span class="token operator">+</span> tempString2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.print(tempString);</span>        <span class="token keyword">int</span> fromIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> endIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endIndex <span class="token operator">=</span> tempString<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>enterStr<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          String line <span class="token operator">=</span> tempString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token operator">+</span>enterStr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按行截取字符串</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//写入文件</span>          <span class="token function">writeFileByLine</span><span class="token punctuation">(</span>fcout<span class="token punctuation">,</span> wBuffer<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>          fromIndex <span class="token operator">=</span> endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 写到文件上   * @param fcout   * @param wBuffer   * @param line   */</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"static-access"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeFileByLine</span><span class="token punctuation">(</span>FileChannel fcout<span class="token punctuation">,</span> ByteBuffer wBuffer<span class="token punctuation">,</span> String line<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      fcout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>wBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fcout<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的阅历</title>
      <link href="/2015/12/23/wo-de-yue-li/"/>
      <url>/2015/12/23/wo-de-yue-li/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>不读书是瞒不住人的。—— 不如</li><li>读书根本无用，但是充满了知道的快乐。—— 微博某 “非”『著』名『程序』猿</li><li>书富如入海，百货皆有。人之精力，不能兼收尽取，但得春所欲求者尔。故愿学者每次作一意求之。 —— 苏轼『东坡文集事略』</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> Photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单美观的文字标签云组件</title>
      <link href="/2015/12/03/beautiful-word-cloud/"/>
      <url>/2015/12/03/beautiful-word-cloud/</url>
      
        <content type="html"><![CDATA[<p>  </p>  <div class="entry"><p>经常在微博或微信的文章中看到漂亮的分析图。我认为在大数据的时代，目前最关键的就是如何让非专业人员轻松的进行数据分析，比如可以象使用office一样制作信息图（infographic），而不是用专业的制图工具。这一步跨过去，看到的将是欣欣向荣的真正大数据时代。</p><p>而这之前，首先缺少的就是，可以让普通开发人员使用的大数据时代的可视化图表组件，比如标签云图，所幸，业界已经有<a href="http://github.com/ecomfe/echarts" target="_blank" rel="noopener">ECharts</a>和<a href="http://github.com/timdream/wordcloud" target="_blank" rel="noopener">WordCloud</a>这两大利器，本文只介绍后者。</p><p><img src="http://bruce.u.qiniudn.com/2014/02/10/wordcloud-cn.jpg" alt="中文"></p><p><a id="more"></a></p><p>首先页面必须是html5编写。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">“UTF-8”</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">body</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>引入<a href="http://jquery.com/" target="_blank" rel="noopener">jQuery</a>和<a href="http://github.com/timdream/wordcloud2.js" target="_blank" rel="noopener">WordCloud2.js</a>。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">“src/wordcloud2.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">“//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>定义canvas容器。</p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="tag">div</span> id=<span class="string">“canvas-container”</span> align=<span class="string">“center”</span>&gt;</span><br><span class="line"> &lt;<span class="tag">canvas</span> id=<span class="string">“canvas”</span> <span class="attribute">width</span>=<span class="string">“800px”</span> <span class="attribute">height</span>=<span class="string">“600px”</span>&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>绘图。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="prolog"> </span><br><span class="line"><span class="atom">var</span> <span class="atom">options</span> = <span class="atom">eval</span>({</span><br><span class="line">  <span class="string">“list”</span>: [[<span class="string">‘傻猎豹’</span>, <span class="number">10</span>], [<span class="string">‘不如’</span>, <span class="number">9</span>], [<span class="string">‘麻花疼’</span>, <span class="number">7</span>], [<span class="string">‘麻云’</span>, <span class="number">6</span>],[<span class="string">‘李眼红’</span>, <span class="number">4</span>], [<span class="string">‘雷布斯’</span>, <span class="number">5</span>],[<span class="string">‘周红衣’</span>, <span class="number">4</span>],[<span class="string">‘刘墙洞’</span>, <span class="number">3</span>],[<span class="string">‘李国情’</span>, <span class="number">3</span>]],</span><br><span class="line">  <span class="string">“gridSize”</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="string">“weightFactor”</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="string">“fontFamily”</span>: <span class="string">‘Hiragino Mincho Pro, serif’</span>,</span><br><span class="line">  <span class="string">“color”</span>: <span class="string">‘random-dark’</span>,</span><br><span class="line">  <span class="string">“backgroundColor”</span>: <span class="string">‘#f0f0f0’</span>,</span><br><span class="line">  <span class="string">“rotateRatio”</span>: <span class="number">0</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="atom">var</span> <span class="atom">canvas</span> = <span class="atom">document</span>.<span class="atom">getElementById</span>(<span class="string">‘canvas’</span>);</span><br><span class="line"></span><br><span class="line"><span class="name">WordCloud</span>(<span class="atom">canvas</span>, <span class="atom">options</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>&gt; 至此，全部完毕。执行页面，美丽的云图便展现在你面前，具体的API可以参考<a href="http://github.com/timdream/wordcloud2.js/blob/master/API.md" target="_blank" rel="noopener">这里</a>。<br><br>下面举个英文的例子，为了美观稍微改变一下参数：<br><br><figure class="highlight prolog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">“list”</span>: [[<span class="string">‘bruce-sha’</span>, <span class="number">10</span>], [<span class="string">‘buru’</span>, <span class="number">9</span>], [<span class="string">‘tencent’</span>, <span class="number">7</span>], [<span class="string">‘alibaba’</span>, <span class="number">6</span>], [<span class="string">‘baidu’</span>, <span class="number">4</span>], [<span class="string">‘xiaomi’</span>, <span class="number">5</span>],[<span class="string">‘360’</span>, <span class="number">4</span>],[<span class="string">‘jingdong’</span>, <span class="number">3</span>],[<span class="string">‘dangdang’</span>, <span class="number">3</span>],[<span class="string">‘ibruce.info’</span>, <span class="number">1</span>]],</span><br><span class="line"><span class="string">“gridSize”</span>: <span class="number">16</span>,</span><br><span class="line"><span class="string">“weightFactor”</span>: <span class="number">16</span>,</span><br><span class="line"><span class="string">“fontFamily”</span>: <span class="string">‘Times, serif’</span>,</span><br><span class="line"><span class="string">“color”</span>: <span class="string">‘random-light’</span>,</span><br><span class="line"><span class="string">“backgroundColor”</span>: <span class="string">‘#333’</span>,</span><br><span class="line"><span class="string">“rotateRatio”</span>: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p><img src="http://bruce.u.qiniudn.com/2014/02/10/wordcloud-en.jpg" alt="英文"></p></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> WordCloud </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
